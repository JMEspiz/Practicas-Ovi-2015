MANEJOS DE ENTRADAS Y SALIDAS STANDARD

	ENTRADAS: Se usa una instacia la clase Scanner.

		Scanner <nombre> = new Scanner(System.in);

		Metodos:

			next() : lee un String o caracter.
			nextInt() : lee un entero.
			nextDouble() : lee un double.
			nextLine() : lee una linea.

	SALIDAS:
		System.out.print("Hola mundo");
	`	System.out.println(x);


OPERACIONES MATEMATICAS:
	//aqui colocar metodos de la libreria Math, como las raices, exponentes, pi y lo que se les ocurra.



ESTRUCTURAS DE CONTROL:

	SECUENCIALES:
		a++;
		--a;
	
	CONDICIONALES:
		SIMPLES:
			if(num == 2){ ...}
		ANIDADAS:
			IF-ELSE IF-ELSE:

			if(num == 1){ ...
			}else if (num == 2){...
			} else {...}
			
			SWITCH:

			switch(i):
				case 1:
					...;
					break;
				case 2:
					...;
					break;
				default:
					...;
	REPETITIVAS:
		FOR:
			for(int i = 0; i < 10; i++{..}
		FOR MEJORADO:
			for(String cadena : texto){...}
		WHILE:
			while(x){...}
		DO WHILE
			do{...}while(x);

ARREGLOS

	CREACION:
		int [] arreglo = new int[3];
		<tipo> [] <nombre> = new <tipo>[<size>];
	
	INSERCION:
		Por el indice:
			arreglo[0] = 24;
		con un bucle:
			for(int i = 0; i < 3; i++){
				arreglo[i] = i;
				
			}
	
	BUSQUEDA: 
		for(int i = 0; i < arreglo.length; i++) {
			if(arreglo[i] == 2){
				System.out.println("valor 2 encontrado en el indice " + i " del arreglo");
			}
		}

	ORDENAMIENTO:
		Ascendente completo: OJO ==> import java.util.Arrays;
			Arrays.sort(<arreglo>);

		Ascendente Parcial: declarar los indices como int
			Arrays.sort(<arreglo>, <indice inicio>, <indice final>)
			

		Descendiente Completo:

		Descendiente Parcial:

	OTROS METODOS: OJO ==> import java.util.Arrays;
		IGUALDAD:
			Arrays.equals(arreglo1, arreglo2);
==========================================================================================================		
                      <-//------------------Yormi Altamiranda----------------\\-> 
  Para leer un Archivo de texto plano .txt 
  son necesarias las sigientes biblioteca
    import java.io.FileReader
    import java.io.BufferedReader 
    import java.io.IOException
    --------------------------------------
    1 
    lo Primero que se debe hacer antes de declarar y instanciar 
    dontro del public static void nombre a elegir(){......} es 
    cerrar en try catch esto permite el manejo de exepciones , es lo correcto 
    al manejar archivos ficheros etc
    Ejemplo: 
              try{
                  codigo a utilizar
             
                   }catch (IOExepcion error){
                   System.out.println("Se produjo un error de E/S");
                  }
     -> IOExepcion: Significa que se ha producido un error en la entrada/salida. Por ejemplo, cuando estamos 
     leyendo de la consola, un fichero, etc. Es obligatorio tratar 
     la excepción, ya sea en la cabeza del método 
     con "throws IOException" o con un bloque try/catch.
    --------------------------------------------------------------------------------------------
    2
    se instancia la clase :
    FileReader fileReader = new FileReader(nombre del Archivo.txt); <- se le pasa la ruta y 
    el nombre del archivo con su estencion.txt ya sea por el constructor o directo
    ---------------------------------------------------------------------------------------------
   
    3
    se instancia la clase:
    BufferedReader bufer = new BufferedReader(fileReader): <- se le pasa un parametro de
    tipo FileReader para que lo reserve en la memoria
    ---------------------------------------------------------------------------------------------
    4 
    se instatncia un atributo de tipo String para validar en un while y recibir luego 
    todo los reservado en BufferedReader con el metodo.readLine(); 
    String <nombre a usar>
    Ejemplo:
               while(nombre a usar!=null){
                nombre a usar = b.readLine();
              }
    ---------------------------------------------------------------------------------------------
    5
     dentro del while se hace una segunda  validacion al String instanciado en el 3er paso 
       que si es igual nada (null) donde se controla que si el documento 
       .txt esta vacio no retorne la palabra null en Pantalla
       Ejemplo:
           
              if (nombre a usar==null)
                   break;
    --------------------------------------------------------------------------------------------              
    6 se imprime el documento 
       Ejemplo: System.out.println(cadena);
    --------------------------------------------------------------------------------------------   
    6 Fuera del while cerramos BufferedReader 
      Ejemplo:
      bufer.close();
===============================================================================================================

  para escribir un archivo de texto .txt
  son necesarias las siguentes librerias
       import java.io.FileWriter;
       import java.io.BufferedWriter;
       import java.io.PrintWriter;
       import java.io.File;

    --------------------------------------------------------------------------------------------
    lo Primero que se debe hacer antes de declarar y instanciar 
    dontro del public static void nombre a elegir(){......} es 
    cerrar en try catch esto permite el manejo de exepciones , es lo correcto 
    al manejar archivos ficheros etc
    Ejemplo: 
              try{
                  codigo a utilizar
             
                   }catch (IOExepcion error){
                   System.out.println("Se produjo un error de E/S");
                  }

      -> IOExepcion: Significa que se ha producido un error en la entrada/salida. Por ejemplo, cuando estamos 
     leyendo de la consola, un fichero, etc. Es obligatorio tratar 
     la excepción, ya sea en la cabeza del método 
     con "throws IOException" o con un bloque try/catch.
     ------------------------------------------------------------------------------------------
      1 se debe instanciar la clase  File pasar le ruta y el nombre del archivo
      Ejemplo:
      File f = new File(nombreArchivo);
     ------------------------------------------------------------------------------------------
     2 se debe instanciar la clase FileWriter se le pasa un parametro de
     tipo File que guarda la ruta y 
     el nombre del documento
     Ejemplo: 
      FileWriter w = new FileWriter(f);
    -------------------------------------------------------------------------------------------
    3 se debe instanciar la clase BufferedWriter y se le pasa un parametro de tipo FileWriter para que 
    reserve ne la memoria 
     Ejemplo: 
      BufferedWriter bw = new BufferedWriter(w);
    -------------------------------------------------------------------------------------------
    4 se debe instanciar la clase PrintWriter el cual va a escribir en documento 
    se le pasa un parametro de tipo BufferedWriter
      Ejemplo:
       PrintWriter wr = new PrintWriter(bw);
    -------------------------------------------------------------------------------------------
    5 procedemos a escribir untexto cualquiera oara eso se utilizan dos metodos 
       .write(); mientras que write () toma una cadena
       .append(); Append () puede tomar un CharSequence
       Ejemplo:     
       wr.write("Como Escribir un archivo plano .txt");
       wr.append("\nParticando para en la OVI 2015");
    -------------------------------------------------------------------------------------------
    6 se procede a cerrar el PrintWriter y el BufferedWriter para poder guardar el documento
     Ejemplo:
              wr.close();
              bw.close();
==============================================================================================================

Pila 
        Para la pila es necesaria la libreria 
        import java.util.Stack;
       
         Stack nombre a usar = new Stack();
    -------------------------------------------------------------------------------------------
        push -> Introducimo un dato en la pila
        pop  -> Es utilizado para quitar el ultimo dato introducido en pila  
        peek -> permite ver el ultimo dato de la pila
        empty -> nos permite validar si hay datos en la pila 
    ------------------------------------------------------------------------------------------- 
        esta rutina imprime los elementos introducido en la  pila
        y como se daran cuneta el primero elemento introducimo pasa 
        al ultimo lugar de la pila

       while (nombre a usar.empty==false){
              System.out.println(pila.pop());
       }

================================================================================================================
Cola 
     para la cola es necesaria la libreria 
      import java.util.LinkedList;
    -------------------------------------------------------------------------------------------
    se instancia 
    

       con offer se añade un elemento a la cola 
       con poll se obtiene los datos de la cola
       con peek validamos la cola 
    -------------------------------------------------------------------------------------------
        esta rutina validamos la cola y con System.outpriln(cola.poll);
        procederemos a vaciar e imprimir los elementos de la cola

        while(cola.peek()!=null){
           System.out.println(cola.poll());
       }

================================================================================================================
Lista
      para lista es necesaria la libreria 
       import java.util.LinkedList;

   ----------------------------------------------------------------------------------------------
     para añadir un elemento en la lista usar add
     add(1,17) con el primero indicamo en qye indice va el valor introducido
     con get(0) Muestra el valor introducido en ese indice
     addFirst() Añade el valor en el Primer indice de la lista
     addLast() Añade el valor en el ultimo indice de la lista
     seze Se Obtiene el tamaño de la lista 
     getFirst() nos indica el primer valor de la lista 
     get(lista.size()-1) tambien regresa el ultimo valor de la lista  
     getLast() Regresa el ultimo valor de lalista

   ----------------------------------------------------------------------------------------------
    se instancia de la siguiente manera
      LinkedList lista = new LinkedList();
   ----------------------------------------------------------------------------------------------
    se añade con 
      lista.add("Primer");
   ----------------------------------------------------------------------------------------------
    se imprime con 
      System.out.println("El Tamaño de la lista es:"+lista.size()); con esto mostramos el tamaño de la lista
      System.out.println(lista.get(1))









